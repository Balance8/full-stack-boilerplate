### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AggregateComment {
  avg: CommentAvgAggregateOutputType
  count: CommentCountAggregateOutputType
  max: CommentMaxAggregateOutputType
  min: CommentMinAggregateOutputType
  sum: CommentSumAggregateOutputType
}

type AggregateGroup {
  avg: GroupAvgAggregateOutputType
  count: GroupCountAggregateOutputType
  max: GroupMaxAggregateOutputType
  min: GroupMinAggregateOutputType
  sum: GroupSumAggregateOutputType
}

type AggregatePost {
  avg: PostAvgAggregateOutputType
  count: PostCountAggregateOutputType
  max: PostMaxAggregateOutputType
  min: PostMinAggregateOutputType
  sum: PostSumAggregateOutputType
}

type AggregateUser {
  avg: UserAvgAggregateOutputType
  count: UserCountAggregateOutputType
  max: UserMaxAggregateOutputType
  min: UserMinAggregateOutputType
  sum: UserSumAggregateOutputType
}

type BatchPayload {
  count: Int!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  count: NestedIntFilter
  equals: Boolean
  max: NestedBoolFilter
  min: NestedBoolFilter
  not: NestedBoolWithAggregatesFilter
}

type Comment {
  author: User
  authorId: Int
  contain: String!
  createdAt: DateTime!
  id: Int!
  post: Post!
  postId: Int!
  updatedAt: DateTime!
}

type CommentAvgAggregateOutputType {
  authorId: Float
  id: Float!
  postId: Float!
}

type CommentCountAggregateOutputType {
  _all: Int!
  authorId: Int
  contain: Int
  createdAt: Int
  id: Int!
  postId: Int!
  updatedAt: Int
}

input CommentCreateInput {
  author: UserCreateNestedOneWithoutCommentsInput
  contain: String!
  createdAt: DateTime
  post: PostCreateNestedOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentCreateManyAuthorInput {
  contain: String!
  createdAt: DateTime
  id: Int
  postId: Int!
  updatedAt: DateTime
}

input CommentCreateManyAuthorInputEnvelope {
  data: CommentCreateManyAuthorInput!
  skipDuplicates: Boolean
}

input CommentCreateManyInput {
  authorId: Int
  contain: String!
  createdAt: DateTime
  id: Int
  postId: Int!
  updatedAt: DateTime
}

input CommentCreateManyPostInput {
  authorId: Int
  contain: String!
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input CommentCreateManyPostInputEnvelope {
  data: CommentCreateManyPostInput!
  skipDuplicates: Boolean
}

input CommentCreateNestedManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput]
  create: [CommentCreateWithoutAuthorInput]
  createMany: CommentCreateManyAuthorInputEnvelope
}

input CommentCreateNestedManyWithoutPostInput {
  connect: [CommentWhereUniqueInput]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput]
  create: [CommentCreateWithoutPostInput]
  createMany: CommentCreateManyPostInputEnvelope
}

input CommentCreateOrConnectWithoutAuthorInput {
  create: CommentUncheckedCreateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutPostInput {
  create: CommentUncheckedCreateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutAuthorInput {
  contain: String!
  createdAt: DateTime
  post: PostCreateNestedOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentCreateWithoutPostInput {
  author: UserCreateNestedOneWithoutCommentsInput
  contain: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

type CommentMaxAggregateOutputType {
  authorId: Int
  contain: String
  createdAt: DateTime
  id: Int!
  postId: Int!
  updatedAt: DateTime
}

type CommentMinAggregateOutputType {
  authorId: Int
  contain: String
  createdAt: DateTime
  id: Int!
  postId: Int!
  updatedAt: DateTime
}

input CommentOrderByInput {
  authorId: SortOrder
  contain: SortOrder
  createdAt: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
}

enum CommentScalarFieldEnum {
  authorId
  contain
  createdAt
  id
  postId
  updatedAt
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput]
  NOT: [CommentScalarWhereInput]
  OR: [CommentScalarWhereInput]
  authorId: IntNullableFilter
  contain: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  postId: IntFilter
  updatedAt: DateTimeFilter
}

input CommentScalarWhereWithAggregatesInput {
  AND: [CommentScalarWhereWithAggregatesInput]
  NOT: [CommentScalarWhereWithAggregatesInput]
  OR: [CommentScalarWhereWithAggregatesInput]
  authorId: IntNullableWithAggregatesFilter
  contain: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  postId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type CommentSumAggregateOutputType {
  authorId: Int
  id: Int!
  postId: Int!
}

input CommentUncheckedCreateInput {
  authorId: Int
  contain: String!
  createdAt: DateTime
  id: Int
  postId: Int!
  updatedAt: DateTime
}

input CommentUncheckedCreateNestedManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput]
  create: [CommentCreateWithoutAuthorInput]
  createMany: CommentCreateManyAuthorInputEnvelope
}

input CommentUncheckedCreateNestedManyWithoutPostInput {
  connect: [CommentWhereUniqueInput]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput]
  create: [CommentCreateWithoutPostInput]
  createMany: CommentCreateManyPostInputEnvelope
}

input CommentUncheckedCreateWithoutAuthorInput {
  contain: String!
  createdAt: DateTime
  id: Int
  postId: Int!
  updatedAt: DateTime
}

input CommentUncheckedCreateWithoutPostInput {
  authorId: Int
  contain: String!
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input CommentUncheckedUpdateInput {
  authorId: NullableIntFieldUpdateOperationsInput
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  postId: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUncheckedUpdateManyInput {
  authorId: NullableIntFieldUpdateOperationsInput
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  postId: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUncheckedUpdateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput]
  create: [CommentCreateWithoutAuthorInput]
  createMany: CommentCreateManyAuthorInputEnvelope
  delete: [CommentWhereUniqueInput]
  deleteMany: [CommentScalarWhereInput]
  disconnect: [CommentWhereUniqueInput]
  set: [CommentWhereUniqueInput]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [CommentUpdateManyWithWhereWithoutAuthorInput]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput]
}

input CommentUncheckedUpdateManyWithoutCommentsInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  postId: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUncheckedUpdateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput]
  create: [CommentCreateWithoutPostInput]
  createMany: CommentCreateManyPostInputEnvelope
  delete: [CommentWhereUniqueInput]
  deleteMany: [CommentScalarWhereInput]
  disconnect: [CommentWhereUniqueInput]
  set: [CommentWhereUniqueInput]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput]
  updateMany: [CommentUpdateManyWithWhereWithoutPostInput]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput]
}

input CommentUncheckedUpdateWithoutAuthorInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  postId: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUncheckedUpdateWithoutPostInput {
  authorId: NullableIntFieldUpdateOperationsInput
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateInput {
  author: UserUpdateOneWithoutCommentsInput
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyMutationInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithWhereWithoutAuthorInput {
  data: CommentUncheckedUpdateManyWithoutCommentsInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutPostInput {
  data: CommentUncheckedUpdateManyWithoutCommentsInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput]
  create: [CommentCreateWithoutAuthorInput]
  createMany: CommentCreateManyAuthorInputEnvelope
  delete: [CommentWhereUniqueInput]
  deleteMany: [CommentScalarWhereInput]
  disconnect: [CommentWhereUniqueInput]
  set: [CommentWhereUniqueInput]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [CommentUpdateManyWithWhereWithoutAuthorInput]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput]
}

input CommentUpdateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput]
  create: [CommentCreateWithoutPostInput]
  createMany: CommentCreateManyPostInputEnvelope
  delete: [CommentWhereUniqueInput]
  deleteMany: [CommentScalarWhereInput]
  disconnect: [CommentWhereUniqueInput]
  set: [CommentWhereUniqueInput]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput]
  updateMany: [CommentUpdateManyWithWhereWithoutPostInput]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput]
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: CommentUncheckedUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  data: CommentUncheckedUpdateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutAuthorInput {
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutPostInput {
  author: UserUpdateOneWithoutCommentsInput
  contain: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: CommentUncheckedCreateWithoutAuthorInput!
  update: CommentUncheckedUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  create: CommentUncheckedCreateWithoutPostInput!
  update: CommentUncheckedUpdateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput]
  NOT: [CommentWhereInput]
  OR: [CommentWhereInput]
  author: UserWhereInput
  authorId: IntNullableFilter
  contain: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  post: PostWhereInput
  postId: IntFilter
  updatedAt: DateTimeFilter
}

input CommentWhereUniqueInput {
  id: Int
}

"""Date custom scalar type"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input DateTimeWithAggregatesFilter {
  count: NestedIntFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  max: NestedDateTimeFilter
  min: NestedDateTimeFilter
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

"""Decimal custom scalar type"""
scalar Decimal

type Enum {
  fields: [String!]!
  name: String!
}

type Field {
  create: Boolean!
  editor: Boolean!
  filter: Boolean!
  id: String!
  isId: Boolean!
  kind: KindEnum!
  list: Boolean!
  name: String!
  order: Int!
  read: Boolean!
  relationField: Boolean
  required: Boolean!
  sort: Boolean!
  title: String!
  type: String!
  unique: Boolean!
  update: Boolean!
  upload: Boolean!
}

type Group {
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
  users(cursor: UserWhereUniqueInput, distinct: UserScalarFieldEnum, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): [User!]!
}

type GroupAvgAggregateOutputType {
  id: Float!
}

type GroupCountAggregateOutputType {
  _all: Int!
  createdAt: Int
  id: Int!
  name: Int
  updatedAt: Int
}

input GroupCreateInput {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
  users: UserCreateNestedManyWithoutGroupInput
}

input GroupCreateManyInput {
  createdAt: DateTime
  id: Int
  name: String!
  updatedAt: DateTime
}

input GroupCreateNestedOneWithoutUsersInput {
  connect: GroupWhereUniqueInput
  connectOrCreate: GroupCreateOrConnectWithoutUsersInput
  create: GroupUncheckedCreateWithoutUsersInput
}

input GroupCreateOrConnectWithoutUsersInput {
  create: GroupUncheckedCreateWithoutUsersInput!
  where: GroupWhereUniqueInput!
}

input GroupCreateWithoutUsersInput {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

type GroupMaxAggregateOutputType {
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

type GroupMinAggregateOutputType {
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

input GroupOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GroupRelationFilter {
  is: GroupWhereInput
  isNot: GroupWhereInput
}

enum GroupScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input GroupScalarWhereWithAggregatesInput {
  AND: [GroupScalarWhereWithAggregatesInput]
  NOT: [GroupScalarWhereWithAggregatesInput]
  OR: [GroupScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type GroupSumAggregateOutputType {
  id: Int!
}

input GroupUncheckedCreateInput {
  createdAt: DateTime
  id: Int
  name: String!
  updatedAt: DateTime
  users: UserUncheckedCreateNestedManyWithoutGroupInput
}

input GroupUncheckedCreateWithoutUsersInput {
  createdAt: DateTime
  id: Int
  name: String!
  updatedAt: DateTime
}

input GroupUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUncheckedUpdateManyWithoutGroupInput
}

input GroupUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUncheckedUpdateWithoutUsersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateManyWithoutGroupInput
}

input GroupUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateOneWithoutUsersInput {
  connect: GroupWhereUniqueInput
  connectOrCreate: GroupCreateOrConnectWithoutUsersInput
  create: GroupUncheckedCreateWithoutUsersInput
  delete: Boolean
  disconnect: Boolean
  update: GroupUncheckedUpdateWithoutUsersInput
  upsert: GroupUpsertWithoutUsersInput
}

input GroupUpdateWithoutUsersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpsertWithoutUsersInput {
  create: GroupUncheckedCreateWithoutUsersInput!
  update: GroupUncheckedUpdateWithoutUsersInput!
}

input GroupWhereInput {
  AND: [GroupWhereInput]
  NOT: [GroupWhereInput]
  OR: [GroupWhereInput]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

input GroupWhereUniqueInput {
  id: Int
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input IntNullableWithAggregatesFilter {
  avg: NestedFloatNullableFilter
  count: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  max: NestedIntNullableFilter
  min: NestedIntNullableFilter
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int]
  sum: NestedIntNullableFilter
}

input IntWithAggregatesFilter {
  avg: NestedFloatFilter
  count: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  max: NestedIntFilter
  min: NestedIntFilter
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
  sum: NestedIntFilter
}

"""Json custom scalar type"""
scalar Json

enum KindEnum {
  enum
  object
  scalar
}

type Model {
  create: Boolean!
  delete: Boolean!
  displayFields: [String!]!
  fields: [Field!]!
  id: String!
  idField: String!
  name: String!
  update: Boolean!
}

type Mutation {
  createOneComment(data: CommentCreateInput!): Comment!
  createOneGroup(data: GroupCreateInput!): Group!
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
  deleteManyComment(where: CommentWhereInput): BatchPayload!
  deleteManyGroup(where: GroupWhereInput): BatchPayload!
  deleteManyPost(where: PostWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOneGroup(where: GroupWhereUniqueInput!): Group
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneUser(where: UserWhereUniqueInput!): User
  login(email: String!, password: String!): User
  logout: Boolean
  signup(email: String!, name: String, password: String!): User
  updateField(data: UpdateFieldInput!, id: String!, modelId: String!): Field!
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManyGroup(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateModel(data: UpdateModelInput!, id: String!): Model!
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  updateOneGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group!
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updatePassword(currentPassword: String!, password: String!): Boolean
  upsertOneComment(create: CommentCreateInput!, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertOneGroup(create: GroupCreateInput!, update: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group!
  upsertOnePost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  count: NestedIntFilter
  equals: Boolean
  max: NestedBoolFilter
  min: NestedBoolFilter
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedDateTimeWithAggregatesFilter {
  count: NestedIntFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  max: NestedDateTimeFilter
  min: NestedDateTimeFilter
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedIntNullableWithAggregatesFilter {
  avg: NestedFloatNullableFilter
  count: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  max: NestedIntNullableFilter
  min: NestedIntNullableFilter
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int]
  sum: NestedIntNullableFilter
}

input NestedIntWithAggregatesFilter {
  avg: NestedFloatFilter
  count: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  max: NestedIntFilter
  min: NestedIntFilter
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
  sum: NestedIntFilter
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  contains: String
  count: NestedIntNullableFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  max: NestedStringNullableFilter
  min: NestedStringNullableFilter
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  contains: String
  count: NestedIntFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  max: NestedStringFilter
  min: NestedStringFilter
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Post {
  author: User
  authorId: Int
  comments(cursor: CommentWhereUniqueInput, distinct: CommentScalarFieldEnum, orderBy: CommentOrderByInput, skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  createdAt: DateTime!
  id: Int!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

type PostAvgAggregateOutputType {
  authorId: Float
  id: Float!
}

type PostCountAggregateOutputType {
  _all: Int!
  authorId: Int
  createdAt: Int
  id: Int!
  published: Int
  title: Int
  updatedAt: Int
}

input PostCreateInput {
  author: UserCreateNestedOneWithoutPostsInput
  comments: CommentCreateNestedManyWithoutPostInput
  createdAt: DateTime
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateManyAuthorInput {
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateManyAuthorInputEnvelope {
  data: PostCreateManyAuthorInput!
  skipDuplicates: Boolean
}

input PostCreateManyInput {
  authorId: Int
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput]
  create: [PostCreateWithoutAuthorInput]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateNestedOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostUncheckedCreateWithoutCommentsInput
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostUncheckedCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutCommentsInput {
  create: PostUncheckedCreateWithoutCommentsInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  comments: CommentCreateNestedManyWithoutPostInput
  createdAt: DateTime
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutCommentsInput {
  author: UserCreateNestedOneWithoutPostsInput
  createdAt: DateTime
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostMaxAggregateOutputType {
  authorId: Int
  createdAt: DateTime
  id: Int!
  published: Boolean
  title: String
  updatedAt: DateTime
}

type PostMinAggregateOutputType {
  authorId: Int
  createdAt: DateTime
  id: Int!
  published: Boolean
  title: String
  updatedAt: DateTime
}

input PostOrderByInput {
  authorId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

enum PostScalarFieldEnum {
  authorId
  createdAt
  id
  published
  title
  updatedAt
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput]
  NOT: [PostScalarWhereInput]
  OR: [PostScalarWhereInput]
  authorId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput]
  NOT: [PostScalarWhereWithAggregatesInput]
  OR: [PostScalarWhereWithAggregatesInput]
  authorId: IntNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  published: BoolWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type PostSumAggregateOutputType {
  authorId: Int
  id: Int!
}

input PostUncheckedCreateInput {
  authorId: Int
  comments: CommentUncheckedCreateNestedManyWithoutPostInput
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostUncheckedCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput]
  create: [PostCreateWithoutAuthorInput]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostUncheckedCreateWithoutAuthorInput {
  comments: CommentUncheckedCreateNestedManyWithoutPostInput
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostUncheckedCreateWithoutCommentsInput {
  authorId: Int
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostUncheckedUpdateInput {
  authorId: NullableIntFieldUpdateOperationsInput
  comments: CommentUncheckedUpdateManyWithoutPostInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUncheckedUpdateManyInput {
  authorId: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUncheckedUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput]
  create: [PostCreateWithoutAuthorInput]
  createMany: PostCreateManyAuthorInputEnvelope
  delete: [PostWhereUniqueInput]
  deleteMany: [PostScalarWhereInput]
  disconnect: [PostWhereUniqueInput]
  set: [PostWhereUniqueInput]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput]
}

input PostUncheckedUpdateManyWithoutPostsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUncheckedUpdateWithoutAuthorInput {
  comments: CommentUncheckedUpdateManyWithoutPostInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUncheckedUpdateWithoutCommentsInput {
  authorId: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateInput {
  author: UserUpdateOneWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  createdAt: DateTimeFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  data: PostUncheckedUpdateManyWithoutPostsInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput]
  create: [PostCreateWithoutAuthorInput]
  createMany: PostCreateManyAuthorInputEnvelope
  delete: [PostWhereUniqueInput]
  deleteMany: [PostScalarWhereInput]
  disconnect: [PostWhereUniqueInput]
  set: [PostWhereUniqueInput]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput]
}

input PostUpdateOneRequiredWithoutCommentsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostUncheckedCreateWithoutCommentsInput
  update: PostUncheckedUpdateWithoutCommentsInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUncheckedUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutAuthorInput {
  comments: CommentUpdateManyWithoutPostInput
  createdAt: DateTimeFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateWithoutCommentsInput {
  author: UserUpdateOneWithoutPostsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostUncheckedCreateWithoutAuthorInput!
  update: PostUncheckedUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutCommentsInput {
  create: PostUncheckedCreateWithoutCommentsInput!
  update: PostUncheckedUpdateWithoutCommentsInput!
}

input PostWhereInput {
  AND: [PostWhereInput]
  NOT: [PostWhereInput]
  OR: [PostWhereInput]
  author: UserWhereInput
  authorId: IntNullableFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  id: IntFilter
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  aggregateComment(cursor: CommentWhereUniqueInput, distinct: CommentScalarFieldEnum, orderBy: [CommentOrderByInput], skip: Int, take: Int, where: CommentWhereInput): AggregateComment
  aggregateGroup(cursor: GroupWhereUniqueInput, distinct: GroupScalarFieldEnum, orderBy: [GroupOrderByInput], skip: Int, take: Int, where: GroupWhereInput): AggregateGroup
  aggregatePost(cursor: PostWhereUniqueInput, distinct: PostScalarFieldEnum, orderBy: [PostOrderByInput], skip: Int, take: Int, where: PostWhereInput): AggregatePost
  aggregateUser(cursor: UserWhereUniqueInput, distinct: UserScalarFieldEnum, orderBy: [UserOrderByInput], skip: Int, take: Int, where: UserWhereInput): AggregateUser
  findFirstComment(cursor: CommentWhereUniqueInput, distinct: CommentScalarFieldEnum, orderBy: [CommentOrderByInput], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstGroup(cursor: GroupWhereUniqueInput, distinct: GroupScalarFieldEnum, orderBy: [GroupOrderByInput], skip: Int, take: Int, where: GroupWhereInput): Group
  findFirstPost(cursor: PostWhereUniqueInput, distinct: PostScalarFieldEnum, orderBy: [PostOrderByInput], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstUser(cursor: UserWhereUniqueInput, distinct: UserScalarFieldEnum, orderBy: [UserOrderByInput], skip: Int, take: Int, where: UserWhereInput): User
  findManyComment(cursor: CommentWhereUniqueInput, distinct: CommentScalarFieldEnum, orderBy: [CommentOrderByInput], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  findManyCommentCount(cursor: CommentWhereUniqueInput, distinct: CommentScalarFieldEnum, orderBy: [CommentOrderByInput], skip: Int, take: Int, where: CommentWhereInput): Int!
  findManyGroup(cursor: GroupWhereUniqueInput, distinct: GroupScalarFieldEnum, orderBy: [GroupOrderByInput], skip: Int, take: Int, where: GroupWhereInput): [Group!]!
  findManyGroupCount(cursor: GroupWhereUniqueInput, distinct: GroupScalarFieldEnum, orderBy: [GroupOrderByInput], skip: Int, take: Int, where: GroupWhereInput): Int!
  findManyPost(cursor: PostWhereUniqueInput, distinct: PostScalarFieldEnum, orderBy: [PostOrderByInput], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  findManyPostCount(cursor: PostWhereUniqueInput, distinct: PostScalarFieldEnum, orderBy: [PostOrderByInput], skip: Int, take: Int, where: PostWhereInput): Int!
  findManyUser(cursor: UserWhereUniqueInput, distinct: UserScalarFieldEnum, orderBy: [UserOrderByInput], skip: Int, take: Int, where: UserWhereInput): [User!]!
  findManyUserCount(cursor: UserWhereUniqueInput, distinct: UserScalarFieldEnum, orderBy: [UserOrderByInput], skip: Int, take: Int, where: UserWhereInput): Int!
  findUniqueComment(where: CommentWhereUniqueInput!): Comment
  findUniqueGroup(where: GroupWhereUniqueInput!): Group
  findUniquePost(where: PostWhereUniqueInput!): Post
  findUniqueUser(where: UserWhereUniqueInput!): User
  getSchema: Schema!
  me: User
}

enum QueryMode {
  default
  insensitive
}

type Schema {
  enums: [Enum!]!
  models: [Model!]!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  contains: String
  count: NestedIntNullableFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  max: NestedStringNullableFilter
  min: NestedStringNullableFilter
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input StringWithAggregatesFilter {
  contains: String
  count: NestedIntFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  max: NestedStringFilter
  min: NestedStringFilter
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input UpdateFieldInput {
  create: Boolean
  editor: Boolean
  filter: Boolean
  id: String
  isId: Boolean
  kind: KindEnum
  list: Boolean
  name: String
  order: Int
  read: Boolean
  relationField: Boolean
  required: Boolean
  sort: Boolean
  title: String
  type: String
  unique: Boolean
  update: Boolean
  upload: Boolean
}

input UpdateModelInput {
  create: Boolean
  delete: Boolean
  displayFields: [String]
  fields: [UpdateFieldInput]
  idField: String
  name: String
  update: Boolean
}

type User {
  comments(cursor: CommentWhereUniqueInput, distinct: CommentScalarFieldEnum, orderBy: CommentOrderByInput, skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  createdAt: DateTime!
  email: String!
  group: Group
  groupId: Int
  id: Int!
  name: String
  password: String!
  posts(cursor: PostWhereUniqueInput, distinct: PostScalarFieldEnum, orderBy: PostOrderByInput, skip: Int, take: Int, where: PostWhereInput): [Post!]!
}

type UserAvgAggregateOutputType {
  groupId: Float
  id: Float!
}

type UserCountAggregateOutputType {
  _all: Int!
  createdAt: Int
  email: Int
  groupId: Int
  id: Int!
  name: Int
  password: Int
}

input UserCreateInput {
  comments: CommentCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  group: GroupCreateNestedOneWithoutUsersInput
  name: String
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
}

input UserCreateManyGroupInput {
  createdAt: DateTime
  email: String!
  id: Int
  name: String
  password: String!
}

input UserCreateManyGroupInputEnvelope {
  data: UserCreateManyGroupInput!
  skipDuplicates: Boolean
}

input UserCreateManyInput {
  createdAt: DateTime
  email: String!
  groupId: Int
  id: Int
  name: String
  password: String!
}

input UserCreateNestedManyWithoutGroupInput {
  connect: [UserWhereUniqueInput]
  connectOrCreate: [UserCreateOrConnectWithoutGroupInput]
  create: [UserCreateWithoutGroupInput]
  createMany: UserCreateManyGroupInputEnvelope
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserUncheckedCreateWithoutCommentsInput
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserUncheckedCreateWithoutPostsInput
}

input UserCreateOrConnectWithoutCommentsInput {
  create: UserUncheckedCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutGroupInput {
  create: UserUncheckedCreateWithoutGroupInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserUncheckedCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCommentsInput {
  createdAt: DateTime
  email: String!
  group: GroupCreateNestedOneWithoutUsersInput
  name: String
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
}

input UserCreateWithoutGroupInput {
  comments: CommentCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
}

input UserCreateWithoutPostsInput {
  comments: CommentCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  group: GroupCreateNestedOneWithoutUsersInput
  name: String
  password: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserMaxAggregateOutputType {
  createdAt: DateTime
  email: String
  groupId: Int
  id: Int!
  name: String
  password: String
}

type UserMinAggregateOutputType {
  createdAt: DateTime
  email: String
  groupId: Int
  id: Int!
  name: String
  password: String
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  groupId: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  groupId
  id
  name
  password
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput]
  NOT: [UserScalarWhereInput]
  OR: [UserScalarWhereInput]
  createdAt: DateTimeFilter
  email: StringFilter
  groupId: IntNullableFilter
  id: IntFilter
  name: StringNullableFilter
  password: StringFilter
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput]
  NOT: [UserScalarWhereWithAggregatesInput]
  OR: [UserScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  groupId: IntNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  password: StringWithAggregatesFilter
}

type UserSumAggregateOutputType {
  groupId: Int
  id: Int!
}

input UserUncheckedCreateInput {
  comments: CommentUncheckedCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  groupId: Int
  id: Int
  name: String
  password: String!
  posts: PostUncheckedCreateNestedManyWithoutAuthorInput
}

input UserUncheckedCreateNestedManyWithoutGroupInput {
  connect: [UserWhereUniqueInput]
  connectOrCreate: [UserCreateOrConnectWithoutGroupInput]
  create: [UserCreateWithoutGroupInput]
  createMany: UserCreateManyGroupInputEnvelope
}

input UserUncheckedCreateWithoutCommentsInput {
  createdAt: DateTime
  email: String!
  groupId: Int
  id: Int
  name: String
  password: String!
  posts: PostUncheckedCreateNestedManyWithoutAuthorInput
}

input UserUncheckedCreateWithoutGroupInput {
  comments: CommentUncheckedCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  id: Int
  name: String
  password: String!
  posts: PostUncheckedCreateNestedManyWithoutAuthorInput
}

input UserUncheckedCreateWithoutPostsInput {
  comments: CommentUncheckedCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  groupId: Int
  id: Int
  name: String
  password: String!
}

input UserUncheckedUpdateInput {
  comments: CommentUncheckedUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  groupId: NullableIntFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUncheckedUpdateManyWithoutAuthorInput
}

input UserUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  groupId: NullableIntFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUncheckedUpdateManyWithoutGroupInput {
  connect: [UserWhereUniqueInput]
  connectOrCreate: [UserCreateOrConnectWithoutGroupInput]
  create: [UserCreateWithoutGroupInput]
  createMany: UserCreateManyGroupInputEnvelope
  delete: [UserWhereUniqueInput]
  deleteMany: [UserScalarWhereInput]
  disconnect: [UserWhereUniqueInput]
  set: [UserWhereUniqueInput]
  update: [UserUpdateWithWhereUniqueWithoutGroupInput]
  updateMany: [UserUpdateManyWithWhereWithoutGroupInput]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupInput]
}

input UserUncheckedUpdateManyWithoutUsersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutCommentsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  groupId: NullableIntFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUncheckedUpdateManyWithoutAuthorInput
}

input UserUncheckedUpdateWithoutGroupInput {
  comments: CommentUncheckedUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUncheckedUpdateManyWithoutAuthorInput
}

input UserUncheckedUpdateWithoutPostsInput {
  comments: CommentUncheckedUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  groupId: NullableIntFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpdateInput {
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  group: GroupUpdateOneWithoutUsersInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpdateManyWithWhereWithoutGroupInput {
  data: UserUncheckedUpdateManyWithoutUsersInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithoutGroupInput {
  connect: [UserWhereUniqueInput]
  connectOrCreate: [UserCreateOrConnectWithoutGroupInput]
  create: [UserCreateWithoutGroupInput]
  createMany: UserCreateManyGroupInputEnvelope
  delete: [UserWhereUniqueInput]
  deleteMany: [UserScalarWhereInput]
  disconnect: [UserWhereUniqueInput]
  set: [UserWhereUniqueInput]
  update: [UserUpdateWithWhereUniqueWithoutGroupInput]
  updateMany: [UserUpdateManyWithWhereWithoutGroupInput]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupInput]
}

input UserUpdateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserUncheckedCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUncheckedUpdateWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserUncheckedCreateWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUncheckedUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithWhereUniqueWithoutGroupInput {
  data: UserUncheckedUpdateWithoutGroupInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithoutCommentsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  group: GroupUpdateOneWithoutUsersInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutGroupInput {
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutPostsInput {
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  group: GroupUpdateOneWithoutUsersInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpsertWithWhereUniqueWithoutGroupInput {
  create: UserUncheckedCreateWithoutGroupInput!
  update: UserUncheckedUpdateWithoutGroupInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutCommentsInput {
  create: UserUncheckedCreateWithoutCommentsInput!
  update: UserUncheckedUpdateWithoutCommentsInput!
}

input UserUpsertWithoutPostsInput {
  create: UserUncheckedCreateWithoutPostsInput!
  update: UserUncheckedUpdateWithoutPostsInput!
}

input UserWhereInput {
  AND: [UserWhereInput]
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  group: GroupWhereInput
  groupId: IntNullableFilter
  id: IntFilter
  name: StringNullableFilter
  password: StringFilter
  posts: PostListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
